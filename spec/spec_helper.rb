require "bugsnag/api"
require "webmock/rspec"
require "faker"
require "vcr"

# This file was generated by the `rspec --init` command. Conventionally, all
# specs live under a `spec` directory, which RSpec adds to the `$LOAD_PATH`.
# Require this file using `require "spec_helper"` to ensure that it is only
# loaded once.
#
# See http://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration
RSpec.configure do |config|
  config.expect_with :rspec do |c|
    c.syntax = :expect
  end
end

# VCR
VCR.configure do |c|
  c.cassette_library_dir = "spec/cassettes"
  c.hook_into :webmock
  c.configure_rspec_metadata!
  c.default_cassette_options = {
    :record => ENV['TRAVIS'] ? :none : :once
  }

  c.filter_sensitive_data("https://api.bugsnag.com") { Bugsnag::Api.configuration.endpoint }
  c.filter_sensitive_data("api.bugsnag.com") { URI.parse(Bugsnag::Api.configuration.endpoint).host }
  c.filter_sensitive_data("<BUGSNAG_AUTH_TOKEN>") { test_bugsnag_auth_token }
  c.filter_sensitive_data("<BUGSNAG_LOGIN>") { CGI::escape(test_bugsnag_email) }
  c.filter_sensitive_data("<BUGSNAG_EMAIL>") { test_bugsnag_email }
  c.filter_sensitive_data("<BUGSNAG_PASSWORD>") { test_bugsnag_password }
  c.filter_sensitive_data("<BUGSNAG_ACCOUNT_ID>") { test_bugsnag_account }
  c.filter_sensitive_data("<BUGSNAG_COMMENT_ID>") { test_bugsnag_comment }
  c.filter_sensitive_data("<BUGSNAG_ERROR_ID>") { test_bugsnag_error }
  c.filter_sensitive_data("<BUGSNAG_EVENT_ID>") { test_bugsnag_event }
  c.filter_sensitive_data("<BUGSNAG_PROJECT_ID>") { test_bugsnag_project }
  c.filter_sensitive_data("<BUGSNAG_USER_ID>") { test_bugsnag_user }
end

def auth_token_client
  Bugsnag::Api.configure do |config|
    config.endpoint = test_bugsnag_endpoint
  end

  Bugsnag::Api::Client.new do |config|
    config.endpoint = test_bugsnag_endpoint
    config.auth_token = test_bugsnag_auth_token
  end
end

def basic_auth_client
  Bugsnag::Api.configure do |config|
    config.endpoint = test_bugsnag_endpoint
  end

  Bugsnag::Api::Client.new do |config|
    config.endpoint = test_bugsnag_endpoint
    config.email = test_bugsnag_email
    config.password = test_bugsnag_password
  end
end

def bugsnag_url(path)
  URI.join(Bugsnag::Api.configuration.endpoint, path).to_s
end

def basic_bugsnag_url(path, options = {})
  url = File.join(Bugsnag::Api.configuration.endpoint, path)
  uri = Addressable::URI.parse(url)

  uri.user = options.fetch(:login, test_bugsnag_email)
  uri.password = options.fetch(:password, test_bugsnag_password)

  uri.to_s
end

def stub_get(url)
  stub_request(:get, bugsnag_url(url))
end

def test_bugsnag_endpoint
  ENV["BUGSNAG_TEST_ENDPOINT"] || Bugsnag::Api::Configuration::DEFAULT_ENDPOINT
end

def test_bugsnag_auth_token
  ENV["BUGSNAG_TEST_AUTH_TOKEN"]
end

def test_bugsnag_email
  ENV["BUGSNAG_TEST_EMAIL"]
end

def test_bugsnag_password
  ENV["BUGSNAG_TEST_PASSWORD"]
end

def test_bugsnag_account
  ENV["BUGSNAG_TEST_ACCOUNT"]
end

def test_bugsnag_comment
  ENV["BUGSNAG_TEST_COMMENT"]
end

def test_bugsnag_error
  ENV["BUGSNAG_TEST_ERROR"]
end

def test_bugsnag_event
  ENV["BUGSNAG_TEST_EVENT"]
end

def test_bugsnag_project
  ENV["BUGSNAG_TEST_PROJECT"]
end

def test_bugsnag_user
  ENV["BUGSNAG_TEST_USER"]
end
